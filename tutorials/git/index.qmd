---
title: "Controle de Versão com Git e GitHub"
description: | 
  Um tutorial básico sobre o uso do sistema de controle de versão Git e sobre o 
  GitHub
lang: "pt"
date: "2024-10-07"
toc: true
number-sections: true
toc-depth: 2
toc-location: left
author:
  - name: Prof. Dr. Washington S. da Silva 
    affiliation: IFMG - Campus Formiga - Mestrado Profissional em Administração.
    affiliation-url: https://www.formiga.ifmg.edu.br/mestrado
crossref:
  fig-title: '**Fig.**'
  fig-labels: arabic
execute: 
  warning: false
  message: false
bibliography: referencias.bibtex
csl: associacao-brasileira-de-normas-tecnicas-ipea.csl
categories: [controle de versão, git, gitHub]
---


# Introdução


::: {.callout-note icon="false"}
## Objetivos

- Este tutorial é destinado aos estudantes do bacharelado em Administração 
e aos mestrandos do Mestrado Profissional em Administração do 
IFMG - Campus Formiga.

- Também é útil para administradores, economistas, contabilistas, 
auditores e outros profissionais que desejam utilizar ferramentas 
modernas para criar relatórios e outros produtos de forma reproduzível 
e auditável.

- Você não precisa ser programador para aproveitar este material. O tutorial 
foi elaborado pensando em profissionais de negócios que desejam melhorar seu 
fluxo de trabalho com documentos, análises e projetos.
:::



::: {.callout-note icon="false"}
## O que é Git?

- Imagine o Git como um "sistema de salvamento inteligente" que registra 
  cada versão dos seus documentos e projetos.

- Ao contrário do método tradicional de salvar vários arquivos 
  como "**Relatório_v1.docx**", "**Relatório_v2.docx**", o Git guarda apenas 
  as mudanças, economizando espaço.

- É como uma "máquina do tempo" para seu trabalho: você pode visualizar ou 
  restaurar qualquer versão anterior quando precisar, sem perder as versões 
  mais recentes.

- Facilita o trabalho em equipe, permitindo que várias pessoas alterem 
  os mesmos arquivos sem conflitos graves.
:::



::: {.callout-note icon="false"}
## Por que usar Git?

- **Evita a confusão de múltiplas versões**: Adeus a arquivos como   
  "Relatorio_Final_v2_Revisado_Corrigido.docx".

- **Recuperação de trabalho**: Se algo der errado, você pode voltar 
   facilmente a uma versão anterior que funcionava.

- **Experimente sem medo**: Tente novas abordagens sabendo que pode 
  reverter se não gostar do resultado.

- **Trabalho colaborativo organizado**: Múltiplas pessoas podem trabalhar 
  no mesmo projeto sem sobrescrever o trabalho umas das outras.

- **Documentação automática**: O histórico de alterações serve como 
   documentação da evolução do seu trabalho.
:::



::: {.callout-note icon="false"}
## O que é GitHub?

- Um serviço online que funciona como uma "nuvem para projetos Git".

- Pense no GitHub como um Google Drive ou Dropbox especializado para 
  projetos que usam Git.

- Além de armazenar seus arquivos, oferece ferramentas para colaboração, 
  revisão e discussão do trabalho.

- É amplamente usado tanto por desenvolvedores quanto por pesquisadores, 
  analistas e educadores para compartilhar trabalhos.
:::



::: {.callout-note icon="false"}
## Por que usar GitHub?

- **Backup seguro**: Seus projetos ficam armazenados na nuvem, 
  protegidos contra perda de dados se seu computador falhar ou 
  for perdido.

- **Portfólio profissional**: Muitos profissionais usam o GitHub como 
  vitrine de seus trabalhos e habilidades.

- **Colaboração simplificada**: Facilita o trabalho em equipe mesmo com 
  pessoas em locais diferentes.

- **Compartilhamento eficiente**: Compartilhe seu trabalho com colegas 
  de curso, de trabalho ou com o mundo.

- **Aprendizado constante**: Acesse e estude projetos semelhantes ao seu 
  para aprender novas técnicas e abordagens.
:::





# Instalação e Configuração Básica


::: {.callout-note icon="false"}
## Instalando o sistema Git no Windows

1. **Baixe o instalador**:

- Acesse o site oficial: 
[https://git-scm.com/download/win](https://git-scm.com/download/win){target="_blank"}

- O site deve te indicar automaticamente qual a versão adequada para 
  seu sistema operacional.

2. **Execute o instalador**:

- Clique duplo no arquivo baixado (algo como "Git-2.xx.x-64-bit.exe`").
- Aceite as permissões de administrador se solicitado.

3. **Configure o instalador**:

- Mantenha as opções padrão na maioria das telas;

- Na tela "*Adjusting your PATH environment*", escolha a opção 
 recomendada: "*Git from the command line and also from 3rd-party software*"
 
- Para as demais opções, as configurações padrão funcionam bem para 
iniciantes

4. **Conclua a instalação**:

- Clique em "*Install*" e aguarde a conclusão

- Ao finalizar, marque a opção "*Launch Git Bash*" e clique em "*Finish*" 
 para abrir o Git Bash imediatamente

5. **Verifique a instalação**:

- No Git Bash que abriu, digite: `git --version`

- Se aparecer algo como `git version 2.xx.x`, a instalação foi bem-sucedida!
:::



::: {.callout-note icon="false"}
## O que é o Git Bash?

- O Git Bash é um terminal especial (uma janela de linha de comando) 
  instalado junto com o Git no Windows.

- Pense nele como uma "janela de comando" onde você digita instruções 
  para o Git.

- **Por que usar o Git Bash em vez do Prompt de Comando do Windows?**

    - Oferece comandos adicionais úteis que não existem no prompt padrão do Windows.
    - Funciona de forma mais semelhante ao Git em outros sistemas (Mac, Linux).
    - Possui recursos de autocompletar e visualização colorida que facilitam o us.o

- **Como abrir o Git Bash**:

    - Método 1: Pesquise "Git Bash" no menu Iniciar.
    - Método 2: Clique com o botão direito em qualquer pasta e selecione 
     "Git Bash Here" para abrir o terminal já naquela pasta.

- **Não se assuste com a interface de texto!** 

    - Apesar de parecer complicado no início, você precisará aprender apenas alguns comandos 
      básicos para começar.
:::



::: {.callout-note icon="false"}
## Configurando o Git Localmente

Antes de começar a usar o Git, é necessário fazer uma configuração 
inicial básica. Essa configuração identifica quem está fazendo as 
alterações e só precisa ser feita uma vez em cada computador.

1. **Configure seu nome de usuário**:

- Abra o Git Bash

- Digite o comando:

```bash
git config --global user.name "nome_sobrenome"
```
- Exemplo: 

```bash
git config --global user.name "maria_silva"
```


2. **Configure seu email**:

- Use o mesmo email que você usará (ou já usa) para sua conta no GitHub:

```bash
git config --global user.email "seu.email@exemplo.com"
```

- Exemplo: 

```bash
git config --global user.email "maria.silva@gmail.com
```

3. **Verifique suas configurações**:

- Para conferir se tudo está correto:

```bash
git config --global --list
```

- Isso mostrará todas as suas configurações globais

Estas informações serão usadas para identificar suas contribuições em 
projetos, então use dados reais, especialmente se for trabalhar em 
projetos compartilhados.
:::



::: {.callout-note icon="false"}
## Criando uma conta no GitHub

O GitHub é onde você vai armazenar seus projetos Git na nuvem. 
Criar uma conta é gratuito e simples:

1. **Acesse o site do GitHub**:

- Acesse [https://github.com](https://github.com){target="_blank"}

- Clique no botão "Sign up" (Cadastrar-se)

2. **Preencha o formulário de cadastro**:

- Digite seu email (use o mesmo que configurou no Git local).

- Crie uma senha segura.

- Escolha um nome de usuário único:
  
     - Este será parte do endereço dos seus projetos (github.com/seu-usuario).
     - Recomendação: use algo profissional que você não se importaria de 
       mostrar no currículo.

3. **Verifique seu email**:

- O GitHub enviará um código de verificação para seu email.

- Insira este código para confirmar sua conta.

4. **Personalize sua experiência** (opcional):

- O GitHub perguntará sobre seu nível de experiência e interesses.

- Você pode preencher ou pular esta etapa.

5. **Configure a autenticação em dois fatores** (recomendado):

- Para maior segurança, ative a autenticação em dois fatores nas configurações.

- Isso protege sua conta mesmo se alguém descobrir sua senha.

6. **Crie seu primeiro repositório**:

- Após entrar, clique no botão "+" no canto superior direito.

- Selecione "*New repository*" (Novo repositório).

- Dê um nome ao repositório (por exemplo, "meu-primeiro-projeto").

- Adicione uma descrição opcional que explique brevemente o propósito do 
  projeto.
  
- Marque a opção "*Add a README file*" para inicializar o repositório com 
  um arquivo de apresentação.
  
- Clique em "*Create repository*" (Criar repositório).

Pronto! Sua conta está criada e você já tem seu primeiro repositório no GitHub.
:::





# Comandos Essenciais para Começar {#sec-essenciais}


::: {.callout-note icon="false"}
## Comandos Essenciais 

Os quatro comandos básicos que você usará com mais frequência 
(seu fluxo de trabalho padrão) são:

- `git status`: consulta o estado atual dos seus arquivos
- `git add`: prepara as mudanças para serem salvas
- `git commit -m "mensagem"`: salva as mudanças no repositório local
- `git push origin main`: envia as mudanças para o GitHub

Pense nestes comandos como um processo de 4 passos:

1. Verificar o que mudou (`status`)
2. Adicionar/Selecionar o que você quer salvar (`add`)
3. Salvar as mudanças localmente com uma descrição (`commit`)
4. Enviar para a nuvem/GitHub (`push`)
:::



::: {.callout-note icon="false"}
## O que é `git status`?

- O comando `git status` é como tirar uma "foto" do estado atual 
do seu projeto.

- **O que ele mostra?**: 

    - Quais arquivos você modificou desde o último salvamento
    - Quais arquivos são novos e ainda não estão sendo rastreados
    - Quais mudanças já estão prontas para serem salvas (commit)

- **Quando usar?**:

    - Sempre que quiser verificar o que mudou no seu projeto
    - Antes de fazer um commit para confirmar que está incluindo as mudanças certas
    - Quando não se lembrar se salvou suas últimas alterações

- **Exemplo prático**: Imagine que você está trabalhando em uma análise de 
  dados e:

    - Modificou seu script principal (`analise.R`)
    - Adicionou um novo arquivo de dados (`dados_2024.csv`)
    - Modificou seu relatório (`relatorio.qmd`)
    
- Ao digitar `git status`, você verá todos esses arquivos listados indicando 
quais estão prontos para commit (<span style="color: green;">em verde</span>) e 
quais ainda precisam ser adicionados (<span style="color: red;">em vermelho</span>).

- **É como fazer a pergunta**: "O que mudou no meu projeto e o que preciso 
 salvar?"
:::



::: {.callout-note icon="false"}
## O que é `git add`?

- O comando `git add` é como adicionar ou selecionar quais mudanças você 
quer incluir na próxima "foto" (commit) do seu projeto.

- Pense nele como a etapa de "seleção" antes de salvar suas mudanças 
definitivamente.

- **Como funciona na prática?**

- Imagine que você está organizando fotos para um álbum:
  
    - Você tira várias fotos (faz várias mudanças nos arquivos)
    - Antes de imprimir o álbum, seleciona quais fotos quer incluir (`git add`)
    - Só depois de selecionar, você finaliza uma página do álbum (`git commit`)

- **Quando usar?** Use `git add` quando:

    - Terminar de fazer uma alteração que faz sentido ser salva
    - Quiser incluir um novo arquivo ao projeto
    - Antes de fazer um commit

**Exemplos de Uso:**

1. Para adicionar **apenas um arquivo** específico:

```bash
git add scripts/analise.R
```
Esse comando adiciona apenas o arquivo `analise.R` que está na pasta "scripts".
   
Se você estiver trabalhando com análises estatísticas ou financeiras, 
poderia ser:

```bash
git add analise_rentabilidade.R
```

2. Para selecionar **todos os arquivos de uma pasta**:

```bash
git add scripts/
```

Esse comando adiciona todos os arquivos modificados dentro da pasta "scripts"

3. Para selecionar **todos os arquivos modificados** do projeto:

```bash
git add .
```

O ponto "." significa "todos os arquivos" - **use com cuidado!**


**Dica para iniciantes:** 

- Comece usando o comando completo para cada arquivo até se familiarizar 
  com o processo. 
  
- Depois, quando estiver mais confiante, você pode usar o `git add .` para 
  adicionar vários arquivos de uma vez.
:::



::: {.callout-note icon="false"}
## O que é `git commit`?

- O `git commit` é o momento de "salvar oficialmente" as mudanças que você 
  selecionou com o `git add`.

- É como tirar uma foto do estado atual do seu projeto e adicionar uma 
  legenda descrevendo o que mudou.

- Cada commit cria um ponto na linha do tempo do seu projeto ao qual 
  você pode voltar se precisar.

**Como usar:**

```bash
git commit -m "mensagem descrevendo o que você fez"
```

A parte `-m "mensagem"` é onde você explica brevemente o que mudou.

**Exemplos de boas mensagens de commit:**

```bash
git commit -m "adiciona análise inicial dos dados de vendas"
```

```bash
git commit -m "corrige fórmulas na seção de métodos"
```

```bash
git commit -m "finaliza capítulo 3 da dissertação"
```

**Quando fazer um commit?**

Pense em cada commit como um "marco" no seu trabalho:

- **Após completar uma tarefa específica**: 
  "Terminei de analisar os dados de janeiro" → commit
  
- **Após resolver um problema**:
  "Corrigi o erro nas referências" → commit
  
- **Antes de fazer uma mudança grande ou arriscada**:
  "Vou reorganizar toda a estrutura do documento" → commit primeiro!

**Analogia:** Se seu trabalho fosse uma viagem, cada commit seria como 
fincar uma bandeira no caminho dizendo "cheguei até aqui com segurança". 
Se você se perder depois, pode sempre voltar a este ponto.

**Recomendação para iniciantes:** Faça commits frequentes! É melhor 
ter muitos pequenos commits do que poucos commits gigantes.
:::



::: {.callout-note icon="false"}
## O que é `git push`?

- O comando `git push` envia as mudanças que você salvou localmente 
  (com `commit`) para o GitHub.

- É como sincronizar seu trabalho local com a "nuvem", tornando-o disponível 
  para outras pessoas ou em outros computadores.

**Como funciona na prática:**

Imagine que você:

1. Fez várias alterações no seu computador
2. Adicionou essas alterações (`git add`)
3. Salvou-as localmente (`git commit`)

Neste ponto, as mudanças estão apenas no seu computador! Para enviar ao GitHub:

```bash
git push origin main
```

**O que significa "origin main"?**

- `origin` é o nome padrão que o Git dá ao seu repositório remoto 
  no GitHub (como um "apelido" para o endereço completo)

- `main` é o nome do ramo principal do seu projeto (anteriormente chamado 
   de "master" em projetos mais antigos)

**Quando fazer um push?**

- Ao terminar uma sessão de trabalho
- Quando quiser compartilhar seu progresso com colegas
- Como backup de segurança do seu trabalho
- Antes de mudar para outro computador

**Analogia:** Se os commits são como salvar seu jogo em um cartão de memória, 
o push é como fazer um backup desse cartão na nuvem. Se seu computador 
quebrar, você não perde o progresso.

**Dica:** Para ver se seu push funcionou, acesse seu repositório no 
GitHub pelo navegador - você deverá ver todas as mudanças que acabou 
de enviar.
:::



# Comandos Úteis para o Dia a Dia (Opcional)


- Após se sentir familiarizado e confortável com os 4 comandos 
essenciais explicandos na @sec-essenciais, vale a pena conhecer e 
testar outros comandos úteis para o dia a dia, como o 
comando `git diff`.


::: {.callout-note icon="false"}
## O que é `git diff`?

- O comando `git diff` mostra as alterações específicas que foram 
  feitas nos arquivos, mas que ainda não foram preparadas para commit 
  (não passaram pelo `git add`).

- É como um "modo de revisão" que destaca exatamente o que foi adicionado 
  (<span style="color: green;">em verde</span>) e o que foi removido 
  (<span style="color: red;">em vermelho</span>).

- **Quando usar?**:

    - Antes de adicionar arquivos com `git add`, para revisar exatamente o que foi  alterado
    - Para verificar detalhes das modificações que o `git status` apenas lista
    - Quando você não se lembra exatamente o que mudou em um arquivo específico

- **Exemplos de Uso:**

1. Para ver todas as mudanças não preparadas:

```bash
git diff
```

2. Para ver as mudanças em um arquivo específico:

```bash
git diff relatorio.qmd
```

3. Para ver as mudanças que já foram preparadas com `git add` (e 
irão para o próximo commit):

```bash
git diff --staged
```

- **Analogia:** Se o `git status` é como uma lista de compras que 
mostra quais itens você precisa, o `git diff` é como abrir cada item para 
inspecionar seu conteúdo antes de colocá-lo no carrinho.

- **Como interpretar o resultado:**
  
  - Linhas que começam com `+` mostram conteúdo adicionado
  - Linhas que começam com `-` mostram conteúdo removido
  - O contexto (linhas não alteradas) aparece sem símbolos especiais

- **Dica para iniciantes:** 

Use o `git diff` antes de cada `git add` para ter certeza de que 
está adicionando apenas as alterações desejadas, especialmente quando 
trabalha com documentos importantes como relatórios financeiros, análises 
de dados ou capítulos de dissertação.
:::




# Workflow para Trabalhar Colaborativamente

::: {.callout-note icon="false"}
## Objetivo desta seção

- Apresentar um passo a passo prático para orientandos de mestrado 
  colaborarem com seus orientadores usando Git e GitHub.

- Estabelecer um fluxo de trabalho claro que minimize conflitos e 
  maximize a produtividade.

- Servir como guia inicial que pode ser adaptado para outros tipos de 
  colaboração acadêmica.
:::




::: {.callout-note icon="false"}
## Visão Geral do Workflow Colaborativo

O fluxo de trabalho a seguir foi desenhado especificamente para a dinâmica 
entre orientando e orientador, onde ambos contribuem para documentos como 
dissertações, artigos e análises de dados.

1. **Configuração inicial** (feita apenas uma vez).

2. **Ciclo de desenvolvimento** (repetido diariamente/semanalmente).

3. **Incorporação de feedback** (quando o orientador fizer sugestões).

**Fluxo básico:**

1. Orientando baixa/puxa mudanças do repositório no GitHub (pull)
2. Orientando trabalha nos arquivos
3. Orientando envia mudanças (commit + push)
4. Orientador baixa/puxa mudanças (pull)
5. Orientador revisa e faz sugestões
6. Orientador envia feedback (commit + push)
7. Orientando baixa/puxa o feedback (voltando ao passo 1)
:::



##  Configuração Inicial

::: {.callout-note icon="false"}
## Configuração Inicial - Orientando

Esta etapa será realizada apenas uma vez, no início do trabalho com 
seu orientador:

1. **Crie o repositório do projeto**:

- Crie o repositório no GitHub como visto anteriormente.

- Adicione seu orientador como colaborador.

2. **Clone o repositório para seu computador**:

```bash
git clone https://github.com/nome-usuario/nome-repositorio.git
```

Este comando cria uma cópia local do repositório em seu computador.

3. **Confirme que está tudo funcionando**:

- Entre na pasta criada: `cd nome-repositorio`.

- Verifique a conexão: `git remote -v` (deve mostrar a URL do GitHub).

- Faça um teste simples:

```bash
# Crie um arquivo de teste
echo "# Teste de colaboração" > teste.md

# Adicione e faça commit
git add teste.md
git commit -m "Teste inicial de colaboração"

# Envie para o GitHub
git push origin main
```

- Verifique no GitHub se o arquivo apareceu
:::




## Ciclo de Desenvolvimento

::: {.callout-note icon="false"}
## Ciclo Diário/Semanal de Trabalho - Orientando

Este é o ciclo que você repetirá regularmente enquanto trabalha em 
seu projeto:

1. **Comece o dia de trabalho atualizando seu repositório local**:

```bash
# Certifique-se de estar na pasta do projeto
git pull origin main
```
 
Este comando baixa qualquer mudança que seu orientador possa ter feito.

2. **Trabalhe em seus arquivos normalmente**:

- Escreva seu capítulo da dissertação
- Realize análises de dados
- Crie visualizações ou tabelas
- Redija seções do artigo

Trabalhe como você normalmente faria em seu computador.

3. **Salve seu progresso **:
 
 A cada conquista significativa ou no final do dia:
 
```bash
# Verifique o que mudou
git status

# Veja as alterações específicas (opcional)
git diff

# Adicione os arquivos modificados
git add .

# Salve as mudanças localmente com uma mensagem descritiva
git commit -m "Adiciona análise descritiva no capítulo 3"

# Envie para o GitHub
git push origin main
```

**Boas práticas para as mensagens de commit**:

- Seja específico: "Reescreve o texto da seção Introdução".

- Use verbos no presente: "Adiciona", "Corrige", "Atualiza".

- Indique onde a mudança foi feita: "Revisão da Literatura", 
"Metodologia", "Resultados e Discussão", "Introdução" etc.
:::




## Incorporação de Feedback

::: {.callout-note icon="false"}
## Quando seu Orientador Fornecer Feedback - Orientando

Este processo ocorre depois que seu orientador revisar seu trabalho 
e fizer alterações:

1. **Obtenha as mudanças feitas pelo orientador**:

```bash
git pull origin main
```

Isso baixa as alterações, comentários ou correções feitas pelo orientador.

2. **Revise as mudanças**:

```bash
# Para ver quais arquivos foram modificados pelo orientador
git log

# Para ver as mudanças específicas em um arquivo
git diff HEAD~1 HEAD -- caminho/do/arquivo
```

Este comando mostra o que mudou entre a versão atual e a anterior.

3. **Trabalhe com as sugestões**:

- Implemente as correções sugeridas.

- Responda a questionamentos (pode ser no próprio documento ou em um 
  comentário no GitHub).
  
- Complemente seções conforme solicitado.

4. **Continue o ciclo normal**:

Volte ao passo 2 (Ciclo de Desenvolvimento) e continue seu trabalho.
:::




## Lidando com Conflitos

::: {.callout-note icon="false"}
## E se ocorrerem conflitos?

Um conflito acontece quando você e seu orientador editam a mesma parte 
de um arquivo. Não se assuste, isso é normal e pode ser resolvido:

1. **Quando ocorre um conflito**:

Ao executar `git pull`, você verá uma mensagem como:

```
CONFLICT (content): Merge conflict in nome-do-arquivo.extensao
```

2. **Abra o arquivo com conflito**:

Você verá marcações como estas:

```
<<<<<<< HEAD
Seu texto (versão local)
=======
Texto do orientador (versão do GitHub)
>>>>>>> abcd1234
```

3. **Resolva o conflito manualmente**:

- Edite o arquivo para conter o conteúdo final desejado
- Remova as marcações (`<<<<<<<`, `=======`, `>>>>>>>`)
- Salve o arquivo

4. **Conclua a resolução**:

```bash
# Adicione o arquivo resolvido
git add nome-do-arquivo

# Faça um commit da resolução
git commit -m "Resolve conflito no arquivo X"

# Envie para o GitHub
git push origin main
```

**Dica**: Comunique-se com seu orientador quando encontrar conflitos. 
Às vezes, uma conversa rápida pode esclarecer qual versão deve ser mantida.
:::




## Trabalhando com Issues do GitHub

::: {.callout-note icon="false"}
## Usando Issues para Organizar Tarefas

O GitHub possui uma ferramenta chamada "Issues" que é excelente para:

- Listar tarefas pendentes
- Registrar problemas a serem resolvidos
- Documentar discussões entre orientando e orientador

**Como usar**:

1. **Crie uma issue**:

- No GitHub, acesse a aba "Issues" do repositório.
- Clique em "New issue".
- Dê um título descritivo e explique a tarefa/problema.
- Use marcadores como listas, negrito e itálico para organizar.
- Adicione etiquetas (labels) como "revisão", "urgent", "discussão".

2. **Acompanhe o progresso**:

- Comente nas issues para atualizar o progresso.
- Referencie commits relacionados usando "#" (exemplo: "Resolve #4").
- Feche a issue quando a tarefa estiver concluída.

3. **Referencie issues nos commits**:

```bash
git commit -m "Adiciona análise de correlação solicitada na issue #5"
```

Isso cria uma referência cruzada que facilita acompanhar o histórico 
de mudanças e discussões.
:::




## Aplicando este Workflow a Outros Cenários

::: {.callout-note icon="false"}
## Adaptando para Outras Colaborações

Este mesmo fluxo de trabalho pode ser facilmente adaptado para 
colaborar com:

- Colegas de classe em projetos em grupo.
- Outros pesquisadores em artigos científicos.
- Equipes de trabalho em relatórios ou análises.
- Projetos de extensão ou iniciação científica.

A mesma lógica se aplica:

1. Configuração inicial (uma vez).
2. Ciclo frequente de atualizações.
3. Incorporação de feedback dos colaboradores.

A diferença principal em outros cenários pode ser a necessidade 
de usar "branches" (ramificações) para trabalhos mais complexos com 
múltiplos colaboradores, um tópico que pode ser explorado quando você 
já estiver confortável com este fluxo básico.
:::




## Resumo do Workflow

::: {.callout-note icon="false"}
## Resumindo

O ciclo de trabalho com seu orientador segue este padrão:

1. **Comece o dia puxando alterações**: `git pull origin main`

2. **Trabalhe nos arquivos** normalmente

3. **Verifique mudanças**: `git status` e `git diff`

4. **Salve seu progresso**:

   ```bash
   git add .
   git commit -m "Mensagem descritiva"
   git push origin main
   ```
   
5. **Repita** diariamente ou quando concluir uma parte significativa

**Lembre-se**: a comunicação clara com seu orientador sobre qual parte 
cada um está trabalhando pode evitar conflitos e retrabalho.
:::


# Referências

::: {#refs}
:::