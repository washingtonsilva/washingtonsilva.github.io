---
title: "Introdução à Linguagem R"
description: | 
  Um tutorial básico sobre a linguagem R para Ciência de Dados.
lang: "pt"
date: "2024-07-07"
toc: true
number-sections: true
toc-depth: 2
toc-location: left
highlight-style: pygments
author:
  - name: Prof. Dr. Washington S. da Silva 
    affiliation: IFMG - Campus Formiga - Mestrado Profissional em Administração.
    affiliation-url: https://www.formiga.ifmg.edu.br/mestrado
crossref:
  fig-title: '**Fig.**'
  fig-labels: arabic
execute: 
  echo: true
  warning: false
  message: false
categories: [R, Reprodutibilidade]
---

![](img/Rlogo.png){width=30% fig-align="center"}


# Introdução {#sec-introducao}


::: {.callout-note icon="false"}
## Objetivos

- Este tutorial é destinado aos estudantes do bacharelado em Administração 
e aos mestrandos do Mestrado Profissional em Administração do 
IFMG - Campus Formiga.

- Também é útil para administradores, economistas, contabilistas, 
auditores e outros profissionais que desejam utilizar ferramentas 
modernas para criar relatórios e outros produtos de forma reproduzível 
e auditável.

- O objetivo principal é proporcionar uma compreensão sólida da linguagem 
R, desde seus fundamentos até aplicações em análise de dados, 
permitindo que alunos de graduação, mestrandos e demais profissionais 
e pesquisadores interessados desenvolvam habilidades para criar análises 
reproduzíveis e auditáveis. Embora o foco inicial seja a Ciência de Dados 
aplicada à Administração, o conteúdo foi elaborado para ser útil 
em diversas áreas do conhecimento.
:::




::: {.callout-note icon="false"}
## Instalando a Linguagem R 4.4.1

1.  Acesse [https://cloud.r-project.org/](https://cloud.r-project.org/){target="_blank"}

2.  Selecione o sistema operacional, clicando em **Download R for Windows** 
por exemplo.

3.  Na página seguinte clique em **base**.

4.  Clique em **Download R-4.4.3 for Windows**. 

5.  Feito o download basta ir clicando em próximo/next até a instalação 
ser concluída.
:::



::: {.callout-note icon="false"}
## RStudio: Ambiente de Desenvolvimento para R

- Para uma experiência de programação mais produtiva com R, recomenda-se 
fortemente o uso do RStudio, um IDE (Ambiente de Desenvolvimento Integrado) 
especialmente projetado para trabalhar com a linguagem R.

- O RStudio oferece diversas funcionalidades que facilitam o aprendizado 
e uso da linguagem, como editor de código com destaque de sintaxe, projetos 
Rstudio, integração com Git e suporte nativo ao sistema Quarto.

- Para instalar e configurar o RStudio, consulte nosso [Tutorial sobre RStudio](https://washingtonsilva.github.io/tutorials/rstudio/){target="_blank"}, 
onde são apresentadas instruções detalhadas para iniciantes.

- Embora seja perfeitamente possível utilizar R com outros IDEs, a 
combinação (R + RStudio) facilita e potencializa significativamente a 
experiência de aprendizado e desenvolvimento.
:::




::: {.callout-note icon="false"}
## O que é R?

- R é um ambiente ou sistema para computação estatística e gráfico. 

- Este sistema é composto por duas partes: a própria **linguagem** R (que é o 
que a maioria das pessoas querem dizer quando falam sobre R) e um 
**ambiente de tempo de execução** (*runtime environment*).

- R é uma linguagem **interpretada**, o que significa que os usuários acessam 
suas funções por meio de um interpretador de linha de comando.

- Ao contrário de linguagens como Python e Java, R não é uma linguagem 
de programação de uso geral. 

- Em vez disso, R é considerada uma linguagem de domínio específica (DSL), o 
que significa que suas funções e uso foram projetados para uma área 
específica de uso ou domínio.

- No caso de R, o domínio e a computação estatística. Por extensão, R é 
comumente usada para todos os tipos de tarefas de ciência de dados.

- A linguagem R está equipada com um grande conjunto de funções internas 
para a manipulação, análise e visualização de dados. 

- Além das funções internas da linguagem, existem inúmeros pacotes (como os
módulos de Python) que estendem as capacidades da linguagem.
:::




::: {.callout-note icon="false"}
## Origens da Linguagem R

**A linguagem S**

- A linguagem S foi desenvolvida em meados da década de 1970 por John Chambers 
no lendário Bell Labs. O objetivo era oferecer uma abordagem interativa 
para a computação estatística, que fosse fácil de usar e tornasse as tarefas 
de análise de dados mais fáceis e rápidas.

- Em uma entrevista de 2013, Chambers observou que a equipe do Bell Labs 
queria que as pessoas começassem em um ambiente interativo, onde não 
pensassem em si como programadores. Então, à medida que 
suas necessidades se tornaram mais claras e sua sofisticação aumentasse, 
eles dseriam capazes de se orientar gradualmente para a programação 
com a linguagem S.

- A filosofia geral de S era muito semelhante à de R: oferecer um ambiente 
de software que facilitasse a programação computacional e a análise 
estatística, que qualquer um possa aprender a usar.

- Como R, S também pode ser usada para escrever programas mais longos 
centrados em tarefas estatísticas. Ao contrário de R, no entanto, S e 
sua iteração posterior, *S-Plus*, eram produtos licenciados, o que 
significa que tinham que ser comprados de uma empresa.

- Portanto, é importante notar que a linguagem R é um dialeto da 
linguagem S.

**Sintáxe e Semântica**

- Os linguistas usam os termos sintaxe e semântica para descrever elementos 
de linguagens naturais, e os cientistas da computação também adotaram 
esses termos para linguagens de programação.

- Na programação de computadores, a sintaxe se refere às regras que ditam 
a 'ortografia' e a 'gramática' de uma linguagem, enquanto a semântica 
se refere a como os dados ou comandos de uma linguagem são apresentados.

- A sintaxe de R era muito semelhante à de S em seus primeiros anos. Isso 
tornou mais fácil para as pessoas que usavam *S-Plus* mudar para R, o que 
desempenhou um papel fundamental na eventual popularidade de R na academia. 

- A semântica de R, no entanto, está mais próxima da linguagem Scheme, 
uma linguagem de programação funcional.

**R é uma linguagem de baixo ou alto nível?**

- R é considerada uma linguagem de programação de alto nível. Essa 
classificação é baseada em seu nível de abstração da linguagem 
de máquina. 

- Ao contrário das linguagens de baixo nível que exigem conhecimento 
aprofundado da memória e dos processos do computador, linguagens de 
alto nível como R são projetadas para serem facilmente compreendidas 
e escritas por humanos, tornando-as mais acessíveis para estatísticos, 
analistas de dados e pesquisadores.
:::




::: {.callout-note icon="false"}
## Um Breve Histórico da Linguagem R

- **1991**: Os professores e estatísticos Ross Ihaka e Robert Gentleman 
começam a trabalhar em um novo dialeto da linguagem S como um projeto de 
pesquisa para o Departamento de Estatística da Universidade de Auckland 
na Nova Zelândia.

- **1993**: O primeiro anúncio de R chega ao público através do arquivo de 
dados StatLib e da lista de discussão s-news.

- **1995**: O estatístico Martin Mächler convence os criadodes de R a lançar 
a linguagem sob uma licença pública geral GNU, tornando R gratuita e 
de código aberto. Ihaka e Gentleman lançam seu artigo seminal apresentando 
R ao mundo.

- **1997**: O R Core Team foi formado, este grupo é o único com acesso ao 
código-fonte R. No mesmo ano, foi criada a 
*Comprehensive R Archive Network* (CRAN). Este repositório de pacotes R 
ajuda os profissionais em inúmeras tarefas.

- **2000**: R versão 1.0.0 foi lançada ao público.

- **Março de 2024**: Estamos atualmente na versão R 4.3.3
:::




::: {.callout-note icon="false"}
## Por que usar a linguagem R?

- **Gratuito e de código aberto**: Diferentemente de softwares estatísticos 
proprietários, R é completamente gratuito e seu código-fonte é aberto, 
permitindo total transparência e personalização.

- **Especialmente projetado para análise estatística e ciência de dados**: 
Enquanto outras linguagens podem ser adaptadas para estas tarefas, R foi 
concebida especificamente para computação estatística e visualização 
de dados.

- **Ampla comunidade acadêmica e profissional**: R possui uma comunidade 
ativa de usuários que contribuem constantemente com novos pacotes, métodos e 
soluções para problemas complexos.

- **Integração com o sistema Quarto**: Perfeita compatibilidade com o 
sistema de publicação Quarto, permitindo a criação de documentos, 
apresentações e websites dinâmicos e reproduzíveis.

- **Ecossistema Tidyverse**: O conjunto de pacotes Tidyverse fornece 
uma gramática consistente para manipulação, visualização e modelagem 
de dados, especialmente útil para iniciantes.

- **Excelência em visualização de dados**: Pacotes como ggplot2 permitem 
criar visualizações estatísticas sofisticadas e personalizáveis.

- **Relevância no mercado**: Profissionais com conhecimento em R são 
valorizados em setores como finanças, consultorias, pesquisa de mercado 
e análise de negócios.

- **Reprodutibilidade científica**: R facilita a implementação de 
práticas de ciência reproduzível, essencial para pesquisas acadêmicas 
e relatórios corporativos auditáveis.

- **Versatilidade em tipos de análise**: Desde estatísticas descritivas 
simples até modelos complexos de machine learning e econometria aplicada, 
R oferece ferramentas para diversos níveis de análise.

- **Documentação extensa**: Ampla disponibilidade de documentação, 
tutoriais, livros e recursos online, facilitando o aprendizado contínuo.
:::


::: {.callout-note icon="false"}
## Vídeo sobre R

- Para finalizar esta introdução, assista o vídeo a seguir sobre a 
linguagem R disponibilizado pelo 
[R Consortium](https://r-consortium.org){target="_blank"}: 

{{< video https://www.youtube.com/watch?v=XcBLEVknqvY
    title="What is R?"
    aspect-ratio="21x9" 
>}}
:::



::: {.callout-note icon="false"}
## Próximos Passos

Nas próximas seções do tutorial vamos explorar os conceitos básicos 
da linguagem R, que servirão como alicerce para os tópicos posteriores. 
Compreender esses fundamentos é essencial antes de avançarmos para 
análises mais complexas.
:::





# Variáveis e Atribuição de Valores

Em R, a atribuição de valores a variáveis é fundamental para armazenar e 
manipular dados. Por exemplo, podemos criar variáveis para armazenar 
informações financeiras, como receitas, custos e lucros, que são 
essenciais para análises em Administração.

```{r}
# Exemplo: Atribuição de valores a variáveis
receita_mensal <- 850000  # Receita mensal da empresa
custos_mensais <- 500000  # Custos mensais

# Cálculo do lucro
lucro_mensal <- receita_mensal - custos_mensais  
lucro_mensal
```

Todas as instruções R com as quais criamos variáveis ou objetos têm 
o mesmo formato:

```{r}
#| eval: false
#| echo: true

nome_do_objeto <- valor
```

Lemos esse código como: "*valor é atribuído a nome_objeto*"

Em R, podemos atribuir informações às variáveis (ou objetos) utilizando 
os seguintes operadores de atribuição:

```{r}
#| label: op-atribuicao
#| echo: true

# Diferentes formas de atribuição em R
# Mesmo resultado, estilos diferentes

# Operador recomendado (<-) 
receita_mensal <- 850000
receita_mensal

# Alternativa (=), funciona, mas menos 
# recomendado
lucro_operacional = 320000
lucro_operacional
```

Em R, como em todas as linguagens, fazemos muitas atribuições de 
valores a variáveis, e não é agradável digitar o operador manualmente. 
Assim, o RStudio oferece um atalho de teclado simples para inserir 
o operador `<-`:

- Atalho do RStudio: `Alt + -` (Windows/Linux) ou `Option + -` (Mac)

- Observe que o RStudio automaticamente envolve `<-` 
com **espaços**, o que é uma boa prática de formatação de código.

- Códigos sem espaços são difíceis de ler compare: 

`lucro<-receita-custos` versus 

`lucro <- receita - custos`


::: {.callout-note icon="false"}
## Boas Práticas para Escrever Códigos R

Nomes de variáveis devem começar com uma letra e podem conter 
`letras`, `números`, `_` e `.`

É importante criar nomes de objetos **simples e descritivos** que 
representem claramente seu conteúdo. Em Administração, é comum 
trabalhar com dados financeiros, de desempenho ou de mercado, 
então use nomes que facilitem a compreensão do código.

**Exemplos de boas práticas**:

```{r}
#| eval: false

# Margem bruta da empresa
margem_bruta <- 0.35  

# Fluxo de caixa operacional
fluxo_caixa_operacional <- receita - custos  
```

**Estilos de nomenclatura**:

- **snake_case**: `margem_bruta`, `fluxo_caixa_operacional`
- **camelCase**: `MargemBruta`, `fluxoCaixaOperacional`

Escolha um estilo e mantenha a consistência em todo o código.
:::


::: {.callout-warning}
## Práticas a evitar

Evite os seguintes erros comuns:

1. **Nomes genéricos**:

- Ruim: `dados`, `resultado`, `x`
- Melhor: `receita_anual`, `lucro_liquido`


2. **Nomes muito longos**:

- Ruim: `calculo_da_margem_de_contribuicao_ajustada`
- Melhor: `margem_contribuicao`


3. **Espaços nos nomes**:

- Ruim: `margem bruta <- 0.35` (causa erro)
- Melhor: `margem_bruta <- 0.35`


4. **Nomes começando com números**:

- Ruim: `1trimestre <- "Janeiro-Março"` (inválido)
- Melhor: `trimestre1 <- "Janeiro-Março"`


5. **Sobrescrever funções existentes**:

- Ruim: `mean <- 10` (sobrescreve a função `mean()`)
- Melhor: `media <- 10`
:::


::: {.callout-tip}
## Como Imprimir Informações sobre Objetos em R

Em R, existem algumas formas simples e eficazes de exibir 
informações sobre objetos ou variáveis. Esses métodos são ideais 
para visualizar valores, depurar código ou criar saídas personalizadas. 
Abaixo estão as principais formas:

**1. Usando** `print()`

A função `print()` é a maneira mais básica de exibir o conteúdo de 
um objeto:

```{r}
# Exemplo: Usando print()
receita <- 850000.50
print(receita)  # Exibe o valor da variável
```

**2. Imprimindo diretamente no console**

Em R, você pode exibir o conteúdo de um objeto simplesmente 
digitando seu nome no console. Isso chama automaticamente 
a função `print()` implicitamente:

```{r}
# digitar o nome do objeto exibe seu valor
receita  
```

**3. Usando a função** `cat()` 

A função `cat()` permite exibir informações de forma mais 
personalizada, combinando texto e valores. É útil para criar 
mensagens ou relatórios simples.

```{r}
# a funçaão cat() combina texto e valor
cat("A receita mensal é:", receita)  
```

**Resumo**:

- Use `print()` para exibir valores de forma explícita.

- Digite o nome do objeto diretamente no console para exibir 
  seu valor de forma rápida.
  
- Use `cat()` para criar saídas personalizadas, combinando 
  texto e valores.
:::



# Tipos atômicos de dados

Em R, os dados são armazenados em diferentes tipos atômicos (básicos), 
cada um com características específicas. A @tbl-1 mostra os principais 
tipos.

Tipo          | Classe      | Descrição                          
------------- | ----------- | ----------------------------------
`double`      | `numeric`   | um vetor contendo valores reais (números com casas decimais)
`integer`     | `numeric`   | um vetor contendo valores inteiros (números sem casas decimais)
`character`   | `character` | um vetor contendo valores de texto (caracteres)
`logical`     | `logical`   | um vetor contendo valores lógicos (`TRUE`/`FALSE`)

: Principais Tipos {#tbl-1}


A @tbl-2 exibe alguns tipos especiais que podem aparecer em análises de 
dados. 

Tipo       | Descrição    
-----------|---------------------------------------------  
`NA`       | `Not Available`: representa dados faltantes
`NaN`      | `Not a Number`: (ex: `0 / 0`)
`Inf`      | $+ \infty$ ou $- \infty$: (ex: `1 / 0`)

: Tipos Especiais {#tbl-2}



As subseções seguintes apresentam alguns exemplos simples de atribuição 
dos tipos principais a variáveis ou objetos e de ocorrência dos 
tipos especiais. 


## Tipos `double` e `integer`

```{r}
# double (números com casas decimais)
receita <- 850000.50  

# integer (números inteiros)
total_funcionarios <- 50L   

# verifica os tipos
typeof(receita)
typeof(total_funcionarios)
```


::: {.callout-tip}
## classe `numeric`

Apesar dos tipos `double` e `integer` representarem números decimais e 
inteiros de forma diferente, ambos pertencem à classe `numeric`, assim, 
na maioria das situações, você não precisa se preocupar com a possível 
diferença.

```{r}
class(receita)
class(total_funcionarios)
```

**Diferença entre** `typeof` e `class`

Em R, as funções `typeof` e `class` fornecem informações diferentes 
sobre um objeto:

- **`typeof`**: Retorna o **tipo interno** do objeto, ou seja, 
como R armazena o objeto na memória. Por exemplo:

```{r}
#| eval: false
typeof(receita)  # Retorna "double"
typeof(total_funcionarios)  # Retorna "integer"
```

- **`class`**: Retorna a **classe** do objeto, que define como R 
trata o objeto em operações e funções. Por exemplo:

```{r}
#| eval: false
class(receita)  # Retorna "numeric"
class(total_funcionarios)  # Retorna "numeric"
```

Em resumo:

- Use `typeof` para entender como R armazena o objeto internamente.
- Use `class` para entender como R trata o objeto em operações e funções.
:::



## Tipo `character`

```{r}
# character (texto)
instituicao <- "IFMG Formiga" 

# verifica o tipo 
typeof(instituicao)
```



## Tipo `logical` 

```{r}
# logical (lógico, TRUE/FALSE)
lucro_positivo <- TRUE  

# verifica o tipo 
typeof(lucro_positivo)
```



## Tipo Especial `NA`

Em análises de dados reais, é comum alguns dados não estarem disponíveis, por 
alguma razão, assim, o tipo especial `NA` representa esse tipo de ocorrência.


```{r}
# cria uma variável com um valor ausente
dados_faltantes <- c(1, NA, 3)  
dados_faltantes
```



## Tipo Especial `NaN` (Not a Number)

```{r}
# operação inválida
resultado_invalido <- 0 / 0  
resultado_invalido
```



## Tipo Especial `inf`

```{r}
# inf pode resultar da divisão por zero
divisao_por_zero <- 1 / 0  
divisao_por_zero
```


## Exercícios 

















